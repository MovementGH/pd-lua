#N canvas 506 36 561 528 10;
#X declare -lib pdlua -path examples;
#X msg 55 227 load hello.lua;
#X text 33 358 See also:;
#X obj 343 232 hello;
#X obj 55 257 pdlua;
#X obj 98 358 pdluax hello;
#N canvas 604 120 701 564 pdlua_HOWTO 0;
#X obj 54 94 cnv 15 500 140 empty empty pdlua_HOWTO 20 12 0 14 #80fc80 #404040 0;
#X obj 54 235 cnv 15 500 160 empty empty Class_Creation 20 12 0 14 #c4c4fc #404040 0;
#X obj 54 396 cnv 15 500 300 empty empty Object_Initialization 20 12 0 14 #fcc4c4 #404040 0;
#X obj 54 697 cnv 15 500 120 empty empty empty 20 12 0 14 #80fc80 #404040 0;
#X obj 54 818 cnv 15 500 170 empty empty empty 20 12 0 14 #c4c4fc #404040 0;
#X obj 54 1692 cnv 15 500 100 empty empty Sending_To_Receivers 20 12 0 14 #fcc4c4 #404040 0;
#X obj 54 1793 cnv 15 500 120 empty empty Receivers 20 12 0 14 #80fc80 #404040 0;
#X text 72 119 The Lua loader included in -lib pdlua allows externals for Pd to be written in the Lua programming language. (http://www.lua.org/);
#X text 72 161 If you try to create an object [foo] in Pd \, Pd checks if the class "foo" exists. If it doesn't \, it tries to load an external file that "probably" will contain code for "foo". The Lua loader adds support for loading "foo.pd_lua" when you try to create [foo].;
#X obj 54 989 cnv 15 500 70 empty empty Object_Finalization 20 12 0 14 #fcc4c4 #404040 0;
#X text 72 307 This creates a new Pd class called "foo". The 'local' declaration is optional \, but recommended -- without it \, 'foo' is global \, which means any Lua code can modify it (possibly by accident).;
#X text 72 255 The first expression/statement in the text file "foo.pd_lua" should be of the form:;
#X obj 54 1060 cnv 15 500 400 empty empty Inlet_Methods 20 12 0 14 #80fc80 #404040 0;
#X text 72 509 or equivalently:;
#X obj 54 1461 cnv 15 500 230 empty empty Sending_To_Outlets 20 12 0 14 #c4c4fc #404040 0;
#X text 72 417 Then you can add methods to the Pd class. The most important one is 'initialize' \, which is executed when a new object is created:;
#X text 88 605 [foo a b 1 2 3 c];
#X text 72 576 'sel' is usually (always?) the class name \, 'atoms' are the creation arguments in a Lua table. For example a Pd object;
#X text 73 623 would have sel equal to "foo" and the atoms:;
#X text 72 696 Being a method \, 'initialize' has a 'self' variable (which is the object to be created) \, and if you want your objects to have inlets or outlets you need need to set those fields in this method (Pd doesn't support changing the number of inlets or outlets after an object is created):;
#X text 72 803 The default inlet/outlet counts are 0;
#X text 72 823 The return value of 'initialize' is used to allow objects to fail to create (for example \, if the creation arguments are bad). Most of the time you will 'return true' \, but if you really can't create then you can 'return false'.;
#X text 72 1011 The 'finalize' method is called when the object is deleted by Pd. You can clean up stuff here if needed. The default implementation does nothing.;
#X text 72 1711 You can send messages to receivers like this:;
#X text 72 658 where <> should be curly brackets \, but Pd won't print them in a comment.;
#X text 71 1752 (again the <> represent curly brackets);
#X text 73 1873 Remember to clean up your receivers in object:finalize() \, or weird things will happen.;
#X obj 54 1914 cnv 15 500 120 empty empty Clocks 20 12 0 14 #c4c4fc #404040 0;
#X obj 54 2035 cnv 15 500 140 empty empty Miscellaneous_Object_Methods 20 12 0 14 #fcc4c4 #404040 0;
#X text 73 1934 You can bind methods to clocks \, for timing based on Pd's logical clock.;
#X text 73 1977 Remember to clean up your clocks in object:finalize() \, or weird things will happen.;
#X text 72 2055 Execute a Lua file using Pd's path to find it:;
#X text 72 2092 Report an error to Pd's console:;
#X obj 54 2177 cnv 15 500 80 empty empty Miscellaneous_Functions 20 12 0 14 #80fc80 #404040 0;
#X text 72 2200 Print a string to Pd's console:;
#X text 72 2237 Note that pd.post() should not really be used for errors.;
#X obj 50 2267 pdlua;
#X obj 50 121 bng 15 250 50 0 empty empty empty 17 7 0 10 #c6ffc7 #000000 #000000;
#X text 72 1815 You can bind methods to receivers \, to get messages from [send receiver] and " \; receiver message".;
#X obj 520 1991 bng 15 250 50 0 empty empty empty 17 7 0 10 #0c4410 #00fc04 #000000;
#X obj 89 286 cnv 15 400 20 empty empty empty 20 12 0 14 #c4fcc4 #404040 0;
#X text 98 288 local foo = pd.Class:new():register("foo");
#X obj 89 459 cnv 15 400 50 empty empty empty 20 12 0 14 #c4fcc4 #404040 0;
#X obj 89 528 cnv 15 400 50 empty empty empty 20 12 0 14 #c4fcc4 #404040 0;
#X text 96 458 function foo:initialize(sel \, atoms);
#X text 97 471 -- code;
#X text 97 485 end;
#X text 97 527 foo.initialize = function (self \, sel \, atoms);
#X text 96 541 -- code;
#X text 97 554 end;
#X obj 89 935 cnv 15 400 50 empty empty empty 20 12 0 14 #c4fcc4 #404040 0;
#X obj 89 770 cnv 15 400 30 empty empty empty 20 12 0 14 #c4fcc4 #404040 0;
#X text 89 642 <"a" \, "b" \, 1 \, 2 \, 3 \, "c">;
#X text 97 768 self.inlets = 1;
#X text 96 934 function foo:postinitialize();
#X text 96 948 -- code;
#X text 97 963 end;
#X obj 89 2073 cnv 15 400 20 empty empty empty 20 12 0 14 #c4fcc4 #404040 0;
#X obj 89 2116 cnv 15 400 20 empty empty empty 20 12 0 14 #c4fcc4 #404040 0;
#X obj 89 2217 cnv 15 400 20 empty empty empty 20 12 0 14 #c4fcc4 #404040 0;
#X text 97 2073 self:dofile("filename");
#X text 97 2116 self:error("message");
#X text 97 2217 pd.post("a string");
#X obj 520 1754 bng 15 250 50 0 empty empty empty 17 7 0 10 #00fc04 #f8fc00 #000000;
#X floatatom 643 1880 5 0 0 0 - - - 0;
#X msg 555 1705 1000;
#X msg 593 1705 100;
#X text 73 1852 See doc/examples/lreceive.pd_lua for details.;
#X text 73 1773 See doc/examples/lsend.pd_lua for details.;
#X text 73 1962 See doc/examples/ldelay.pd_lua for details.;
#X obj 520 1776 lsend splat-1;
#X obj 555 1758 lsend splat-2;
#X obj 520 1851 lreceive splat- 1 2 3;
#X obj 520 1961 ldelay 1000;
#X text 116 2264 modified from doc/examples/pdlua/lua.txt;
#X text 72 1085 Each inlet should have at least one method that will be called when an item it can handle arrives at that input.;
#X obj 89 1171 cnv 15 400 50 empty empty empty 20 12 0 14 #c4fcc4 #404040 0;
#X text 96 1175 function foo:in_1_float(f);
#X text 95 1188 -- code;
#X text 97 1201 end;
#X obj 89 1244 cnv 15 400 50 empty empty empty 20 12 0 14 #c4fcc4 #404040 0;
#X text 95 1261 -- code;
#X text 97 1274 end;
#X obj 89 1318 cnv 15 400 50 empty empty empty 20 12 0 14 #c4fcc4 #404040 0;
#X text 95 1335 -- code;
#X text 97 1348 end;
#X text 73 1297 A "gimme" method for [foo] accepts any input:;
#X text 96 1322 function foo:in_1(sel \, atoms);
#X obj 89 1519 cnv 15 400 20 empty empty empty 20 12 0 14 #c4fcc4 #404040 0;
#X text 96 1523 self:outlet(2 \, "bang" \, <>);
#X text 70 1542 (as usual <> should be curly brackets);
#X text 72 1498 This will cause the second outlet to emit a bang:;
#X obj 89 1589 cnv 15 400 20 empty empty empty 20 12 0 14 #c4fcc4 #404040 0;
#X text 72 1568 This will cause the second outlet to emit a float:;
#X text 96 1593 self:outlet(2 \, "float" \, <123>);
#X obj 89 1639 cnv 15 400 40 empty empty empty 20 12 0 14 #c4fcc4 #404040 0;
#X text 72 1617 This will cause the first outlet to emit a list:;
#X text 96 1660 self:outlet(1 \, "list" \, somelist);
#X text 96 1643 self.somelist = <some items in a list>;
#X text 73 1223 A "stop" method for inlet 2 of [foo]:;
#X text 96 1248 function foo:in_2_stop();
#X text 72 1115 The name of the method is constructed as "in_n_selector" where n is the inlet number (starting from 1) and selector is a type such as "float" or "bang" \, or a selector name such as "start". Here is a float method for [foo] inlet 1:;
#X obj 89 1730 cnv 15 460 20 empty empty empty 20 12 0 14 #c4fcc4 #404040 0;
#X text 96 1730 pd.send("receiver" \, "selector" \, <"a" \, "message" \, 1 \, 2 \, 3>;
#X obj 89 1392 cnv 15 400 50 empty empty empty 20 12 0 14 #c4fcc4 #404040 0;
#X text 95 1409 -- code;
#X text 97 1422 end;
#X text 73 1371 A method for symbols on any input:;
#X text 96 1396 function foo:in_n_symbol(i \, s);
#X text 72 877 If you need to do things after the Pd object is created \, but before control is returned to Pd \, (such as registering receivers or clocks) you can use the 'postinitialize' method:;
#X text 116 2277 by mrpeach 2011/10/06;
#X text 72 2137 This will allow the object to be highlighted from Pd's menu using Find->Find Last Error.;
#X text 97 784 self.outlets = 2;
#X text 72 1480 Use self:outlet(outlet_number \, type \, table);
#X obj 83 53 pdcontrol;
#X msg 83 22 browse https://agraef.github.io/pd-lua/tutorial/pd-lua-intro.html, f 65;
#X text 159 46 Find basic instructions/examples below on how to write externals in Lua. For a detailed online tutorial \, click the message above., f 64;
#X connect 37 0 36 0;
#X connect 63 0 70 0;
#X connect 65 0 71 0;
#X connect 66 0 71 0;
#X connect 72 0 73 0;
#X connect 72 1 64 0;
#X connect 73 0 39 0;
#X connect 115 0 114 0;
#X restore 375 353 pd pdlua_HOWTO;
#X obj 4 397 cnv 3 550 3 empty empty inlets 8 12 0 13 #dcdcdc #000000 0;
#X obj 4 432 cnv 3 550 3 empty empty outlets 8 12 0 13 #dcdcdc #000000 0;
#X obj 4 467 cnv 3 550 3 empty empty arguments 8 12 0 13 #dcdcdc #000000 0;
#X obj 143 406 cnv 17 3 17 empty empty 0 5 9 0 16 #dcdcdc #9c9c9c 0;
#X obj 4 500 cnv 15 552 21 empty empty empty 20 12 0 14 #e0e0e0 #202020 0;
#X text 243 442 NONE;
#X text 243 477 NONE;
#X text 177 407 load <symbol>;
#X obj 290 115 declare -lib pdlua -path examples;
#X text 151 226 <-- load and run a Lua file;
#X text 91 257 <-- global interface to pdlua;
#X text 23 291 The [hello] object below is loaded from a 'hello.pd_lua' file. You can also provide help files for it and right click on it to ask for them. Right click also allows you to open the .pd_lua file if your system has a known application for it., f 80;
#X text 23 146 If you also create [pdlua] as an object as above \, a global interface is created to load and run "*.lua" files via the 'load' message. Make sure that Pd is aware of the paths where your externals and .lua files are. You can also use declare for this (see that above we also include '-path examples' so it finds the files/externals)., f 80;
#X obj 306 4 cnv 15 250 40 empty empty empty 12 13 0 18 #7c7c7c #e0e4dc 0;
#N canvas 382 141 749 319 (subpatch) 0;
#X coords 0 -1 1 1 252 42 2 100 100;
#X restore 305 3 pd;
#X obj 315 18 cnv 10 10 10 empty empty Load\ externals\ written\ in\ Lua 0 6 2 20 #7c7c7c #e0e4dc 0;
#X obj 3 3 cnv 15 301 42 empty empty pdlua 20 20 2 37 #e0e0e0 #000000 0;
#N canvas 0 22 450 278 (subpatch) 0;
#X coords 0 1 100 -1 302 42 1 0 0;
#X restore 3 3 graph;
#X text 382 231 <- right click for help or open, f 16;
#X text 22 60 [pdlua] registers a loader that allows Pd externals written in Lua (with the "*.pd_lua" extension) to be loaded. To guarantee Pd will load these externals \, you should load [pdlua] as a library \, either at startup or with [delcare]:, f 80;
#X text 75 116 loading [pdlua] from [declare] -->;
#X text 261 407 - load and run a '*.lua' file;
#X text 244 344 Details on writting lua externals ----->, f 20;
#X connect 0 0 3 0;
